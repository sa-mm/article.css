{"note":"Don't delete this file! It's used internally to help with page regeneration.","name":"article.css","tagline":"Replacing LaTeX with HTML + CSS","body":"A CSS style for academic articles\r\n---------------------------------\r\n\r\nI write articles in\r\n[Markdown](http://daringfireball.net/projects/markdown/) &mdash; a\r\nlightweight, readable plain text markup language. I used to use\r\n[MultiMarkdown](http://fletcherpenney.net/multimarkdown/), I now use\r\n[Pandoc](http://johnmacfarlane.net/pandoc/). My typical workflow goes\r\nsomething like:\r\n\r\n 1. Write the draft in Markdown, using [Marked.app](http://markedapp.com/)\r\n \tor HTML to preview the document;\r\n 2. Convert to PDF using Pandoc (via LaTeX).\r\n \r\nThis works great, but recently I've been wondering if I need LaTeX at\r\nall. Few journals will accept LaTeX (at least that I'm aware of); the\r\nstandard format is Microsoft Word or (occasionally) PDF. My only use for\r\nLaTeX, therefore, is to produce good-looking PDF output. The question\r\nhere, then:\r\n\r\n>**Can I make a HTML document that, when printed,\r\nlooks as good as a document produced using LaTeX?** \r\n\r\nThe answer is almost certainly **no**, but I want to see how close I can\r\nget.\r\n\r\nUntil recently I was reliant on LaTeX for it's BibTeX support. Since\r\nPandoc came out with support for\r\n[citeproc-hs](http://gorgias.mine.nu/repos/citeproc-hs/), this is no\r\nlonger true. I can write citations in Pandoc syntax (see\r\n[here](http://johnmacfarlane.net/pandoc/README.html#citations-1)) and\r\nthese are converted appropriately &mdash; whether I'm using Markdown,\r\nPDF or DOCX (this works with just about [any citation\r\nstyle](https://github.com/citation-style-language/styles)) you might\r\nwant).\r\n\r\nWhy?\r\n----\r\n\r\n- HTML preview is quicker than LaTeX preview.\r\n- Single format for web/print.\r\n- It's 2012.\r\n- To learn CSS.\r\n \r\n\r\nFeatures\r\n--------\r\n\r\n - **Citations** (using the Pandoc syntax)\r\n - **Equations** (using LaTeX syntax, processed using MathJax)\r\n \t- Auto-numbering of equations: just surround the equation with  \r\n \t  `<span class=\"eq\">` and `</span>`. (a future version of Pandoc\r\n \t  make this unnecessary).\r\n - **Tables** (using the Pandoc syntax; automatic numbering throughout the document)\r\n - **Figures** (auto-numbering)\r\n - **Fonts**\r\n \t- Times New Roman for the body; Helvetica for the headings (of course, \r\n   can be easily changed).\r\n - **Page layout**\r\n \t- Better-than-default page margins (though more work needed &mdash; ideally would like \r\n   to replicate `article.cls` defaults).\r\n    - Page numbers (currently only supported by [Prince](http://www.princexml.com))\r\n   \r\nThe CSS will also recognise the following: \r\n\r\n - A `<h2>` header with the content \"Abstract\" will be centred and in small-caps.\r\n - A `<h2>` header with the content \"References\" or \"Bibliography\" will be surrounded\r\n   by page breaks.\r\n\r\n\r\nUsage\r\n-----\r\n\r\nJust call `pandoc` with the `-css` option. I'm using the following script:\r\n\r\n      #!/bin/sh\r\n      pandoc *.md -t HTML5 --bibliography=\"/path/to/BibTeX/library.bib\" \r\n      \t--csl=\"/path/to/Styles/harvard3.csl\" \r\n      \t--css=\"/path/to/article.css\"\r\n      \t-s --smart --ascii > draft.html\r\n      \r\n      prince draft.html\r\n      open draft.pdf -a \"/Applications/Skim.app\"\r\n\r\n\r\nThen open the resulting HTML file in a browser and print to PDF. I've\r\nhad best results with [Opera Next](http://www.opera.com/browser/next/),\r\nthe beta version of Opera. This currently has better support for the\r\n`@page` CSS selector that Webkit or Gecko (although it's still very\r\nlimited and this is likely to change in future).\r\n\r\nI'm also investigating using [Prince](http://www.princexml.com/) to convert\r\nHTML to PDF. Prince has several advantages:\r\n\r\n 1. The default output from Prince looks *much* better; \r\n 2. Prince supports more CSS `@page` features than Webkit, Presto (Opera) or Gecko (Firefox);\r\n 3. Prince can be run from the command line, so doesn't require printing from the browser\r\n \t(although [wkhtmltopdf](http://code.google.com/p/wkhtmltopdf/) does overcome this). \r\n\r\nThe downsides are mainly cost. Prince is [extremely expensive](http://www.princexml.com/purchase/). \r\nThere is a free, non-commercial version, but this embeds a small watermark on the first\r\npage. Right now, Prince's advanced `@page` support is worth this limitation, but if other\r\nbrowsers can improve their CSS3 support, this may change.\r\n\r\nWhat's next?\r\n------------\r\n\r\nThese are things I'd *like* to get working; I've no idea if they're actually possible.\r\n\r\n- *Tables*\r\n\t- Support for long tables (i.e. tables with page breaks).\r\n\t- Table footnotes, automatically detected for rows beginning with\r\n\t  `footnote` or similar, using CSS selectors (currently \r\n\t  [not possible](http://stackoverflow.com/questions/1520429/css-3-content-selector))\r\n\t- Decimal alignment (i.e. `dcolumn`) \r\n\t- ~~Improve table CSS~~\r\n- *Page layout*\r\n\t- Better page breaks using CSS;\r\n\t- Better default layout (based on `article.cls`)\t\r\n\t- Footnotes (rather than endnotes)\r\n\t- ~~Fix line spacing around footnote markers~~\r\n\t- ~~Automatic page numbering~~\r\n- *Images*\r\n\t- Place image caption above the image (doesn't look possible in CSS; \r\n\t  requires placing `figcaption` above the content, which would mean \r\n\t  adjusting the HTML from Pandoc)\r\n- *Equations*\r\n\t- Better support for PrinceXML (MathJax isn't supported at present)\r\n\t- ~~Automatic numbering for equations~~\r\n- *Misc*\r\n\t- Clean up the CSS\r\n\t- Write a better example file, with [less bacon](http://baconipsum.com/).\r\n\t- ~~Auto-recognise first `h2` titled \"Abstract\" and format accordingly.~~\r\n\t- ~~Recognise first paragraph following `h2#abstract` and increase margins~~\r\n","google":""}